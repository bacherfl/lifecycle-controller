// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"github.com/keptn/lifecycle-toolkit/operator/apis/lifecycle/v1alpha3"
	"sync"
)

// IObjectiveMock is a mock implementation of analysis.IObjective.
//
//	func TestSomethingThatUsesIObjective(t *testing.T) {
//
//		// make and configure a mocked analysis.IObjective
//		mockedIObjective := &IObjectiveMock{
//			EvaluateFunc: func(values map[string]float64) v1alpha3.ObjectiveResult {
//				panic("mock out the Evaluate method")
//			},
//		}
//
//		// use mockedIObjective in code that requires analysis.IObjective
//		// and then make assertions.
//
//	}
type IObjectiveMock struct {
	// EvaluateFunc mocks the Evaluate method.
	EvaluateFunc func(values map[string]float64) v1alpha3.ObjectiveResult

	// calls tracks calls to the methods.
	calls struct {
		// Evaluate holds details about calls to the Evaluate method.
		Evaluate []struct {
			// Values is the values argument value.
			Values map[string]float64
		}
	}
	lockEvaluate sync.RWMutex
}

// Evaluate calls EvaluateFunc.
func (mock *IObjectiveMock) Evaluate(values map[string]float64) v1alpha3.ObjectiveResult {
	if mock.EvaluateFunc == nil {
		panic("IObjectiveMock.EvaluateFunc: method is nil but IObjective.Evaluate was just called")
	}
	callInfo := struct {
		Values map[string]float64
	}{
		Values: values,
	}
	mock.lockEvaluate.Lock()
	mock.calls.Evaluate = append(mock.calls.Evaluate, callInfo)
	mock.lockEvaluate.Unlock()
	return mock.EvaluateFunc(values)
}

// EvaluateCalls gets all the calls that were made to Evaluate.
// Check the length with:
//
//	len(mockedIObjective.EvaluateCalls())
func (mock *IObjectiveMock) EvaluateCalls() []struct {
	Values map[string]float64
} {
	var calls []struct {
		Values map[string]float64
	}
	mock.lockEvaluate.RLock()
	calls = mock.calls.Evaluate
	mock.lockEvaluate.RUnlock()
	return calls
}
