// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"github.com/keptn/lifecycle-toolkit/operator/apis/lifecycle/v1alpha3"
	"github.com/keptn/lifecycle-toolkit/operator/controllers/common/analysis"
	"sync"
)

// ITargetFactoryMock is a mock implementation of analysis.ITargetFactory.
//
//	func TestSomethingThatUsesITargetFactory(t *testing.T) {
//
//		// make and configure a mocked analysis.ITargetFactory
//		mockedITargetFactory := &ITargetFactoryMock{
//			GetTargetFunc: func(target v1alpha3.Target) analysis.ITarget {
//				panic("mock out the GetTarget method")
//			},
//		}
//
//		// use mockedITargetFactory in code that requires analysis.ITargetFactory
//		// and then make assertions.
//
//	}
type ITargetFactoryMock struct {
	// GetTargetFunc mocks the GetTarget method.
	GetTargetFunc func(target v1alpha3.Target) analysis.ITarget

	// calls tracks calls to the methods.
	calls struct {
		// GetTarget holds details about calls to the GetTarget method.
		GetTarget []struct {
			// Target is the target argument value.
			Target v1alpha3.Target
		}
	}
	lockGetTarget sync.RWMutex
}

// GetTarget calls GetTargetFunc.
func (mock *ITargetFactoryMock) GetTarget(target v1alpha3.Target) analysis.ITarget {
	if mock.GetTargetFunc == nil {
		panic("ITargetFactoryMock.GetTargetFunc: method is nil but ITargetFactory.GetTarget was just called")
	}
	callInfo := struct {
		Target v1alpha3.Target
	}{
		Target: target,
	}
	mock.lockGetTarget.Lock()
	mock.calls.GetTarget = append(mock.calls.GetTarget, callInfo)
	mock.lockGetTarget.Unlock()
	return mock.GetTargetFunc(target)
}

// GetTargetCalls gets all the calls that were made to GetTarget.
// Check the length with:
//
//	len(mockedITargetFactory.GetTargetCalls())
func (mock *ITargetFactoryMock) GetTargetCalls() []struct {
	Target v1alpha3.Target
} {
	var calls []struct {
		Target v1alpha3.Target
	}
	mock.lockGetTarget.RLock()
	calls = mock.calls.GetTarget
	mock.lockGetTarget.RUnlock()
	return calls
}
