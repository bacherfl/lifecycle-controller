// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"github.com/keptn/lifecycle-toolkit/operator/apis/lifecycle/v1alpha3"
	"sync"
)

// ICriteriaSetEvaluatorMock is a mock implementation of analysis.ICriteriaSetEvaluator.
//
//	func TestSomethingThatUsesICriteriaSetEvaluator(t *testing.T) {
//
//		// make and configure a mocked analysis.ICriteriaSetEvaluator
//		mockedICriteriaSetEvaluator := &ICriteriaSetEvaluatorMock{
//			EvaluateFunc: func(val float64, criteriaSet v1alpha3.CriteriaSet) v1alpha3.CriteriaSetResult {
//				panic("mock out the Evaluate method")
//			},
//		}
//
//		// use mockedICriteriaSetEvaluator in code that requires analysis.ICriteriaSetEvaluator
//		// and then make assertions.
//
//	}
type ICriteriaSetEvaluatorMock struct {
	// EvaluateFunc mocks the Evaluate method.
	EvaluateFunc func(val float64, criteriaSet v1alpha3.CriteriaSet) v1alpha3.CriteriaSetResult

	// calls tracks calls to the methods.
	calls struct {
		// Evaluate holds details about calls to the Evaluate method.
		Evaluate []struct {
			// Val is the val argument value.
			Val float64
			// CriteriaSet is the criteriaSet argument value.
			CriteriaSet v1alpha3.CriteriaSet
		}
	}
	lockEvaluate sync.RWMutex
}

// Evaluate calls EvaluateFunc.
func (mock *ICriteriaSetEvaluatorMock) Evaluate(val float64, criteriaSet v1alpha3.CriteriaSet) v1alpha3.CriteriaSetResult {
	if mock.EvaluateFunc == nil {
		panic("ICriteriaSetEvaluatorMock.EvaluateFunc: method is nil but ICriteriaSetEvaluator.Evaluate was just called")
	}
	callInfo := struct {
		Val         float64
		CriteriaSet v1alpha3.CriteriaSet
	}{
		Val:         val,
		CriteriaSet: criteriaSet,
	}
	mock.lockEvaluate.Lock()
	mock.calls.Evaluate = append(mock.calls.Evaluate, callInfo)
	mock.lockEvaluate.Unlock()
	return mock.EvaluateFunc(val, criteriaSet)
}

// EvaluateCalls gets all the calls that were made to Evaluate.
// Check the length with:
//
//	len(mockedICriteriaSetEvaluator.EvaluateCalls())
func (mock *ICriteriaSetEvaluatorMock) EvaluateCalls() []struct {
	Val         float64
	CriteriaSet v1alpha3.CriteriaSet
} {
	var calls []struct {
		Val         float64
		CriteriaSet v1alpha3.CriteriaSet
	}
	mock.lockEvaluate.RLock()
	calls = mock.calls.Evaluate
	mock.lockEvaluate.RUnlock()
	return calls
}
