// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"github.com/keptn/lifecycle-toolkit/operator/apis/lifecycle/v1alpha3"
	"sync"
)

// ITargetMock is a mock implementation of analysis.ITarget.
//
//	func TestSomethingThatUsesITarget(t *testing.T) {
//
//		// make and configure a mocked analysis.ITarget
//		mockedITarget := &ITargetMock{
//			EvaluateFunc: func(val float64) v1alpha3.TargetResult {
//				panic("mock out the Evaluate method")
//			},
//		}
//
//		// use mockedITarget in code that requires analysis.ITarget
//		// and then make assertions.
//
//	}
type ITargetMock struct {
	// EvaluateFunc mocks the Evaluate method.
	EvaluateFunc func(val float64) v1alpha3.TargetResult

	// calls tracks calls to the methods.
	calls struct {
		// Evaluate holds details about calls to the Evaluate method.
		Evaluate []struct {
			// Val is the val argument value.
			Val float64
		}
	}
	lockEvaluate sync.RWMutex
}

// Evaluate calls EvaluateFunc.
func (mock *ITargetMock) Evaluate(val float64) v1alpha3.TargetResult {
	if mock.EvaluateFunc == nil {
		panic("ITargetMock.EvaluateFunc: method is nil but ITarget.Evaluate was just called")
	}
	callInfo := struct {
		Val float64
	}{
		Val: val,
	}
	mock.lockEvaluate.Lock()
	mock.calls.Evaluate = append(mock.calls.Evaluate, callInfo)
	mock.lockEvaluate.Unlock()
	return mock.EvaluateFunc(val)
}

// EvaluateCalls gets all the calls that were made to Evaluate.
// Check the length with:
//
//	len(mockedITarget.EvaluateCalls())
func (mock *ITargetMock) EvaluateCalls() []struct {
	Val float64
} {
	var calls []struct {
		Val float64
	}
	mock.lockEvaluate.RLock()
	calls = mock.calls.Evaluate
	mock.lockEvaluate.RUnlock()
	return calls
}
